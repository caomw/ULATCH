/*******************************************************************
*   ULATCH.h
*   ULATCH
*
*	Author: Kareem Omar
*	kareem.omar@uah.edu
*	https://github.com/komrad36
*
*	Last updated Sep 12, 2016
*******************************************************************/
//
// Fastest CPU implementation of an UPRIGHT (no rotation)
// LATCH 512-bit binary feature descriptor
// as described in the 2015 paper by
// Levi and Hassner:
//
// "LATCH: Learned Arrangements of Three Patch Codes"
// http://arxiv.org/abs/1501.03719
//
// See also the ECCV 2016 Descriptor Workshop paper, of which I am a coauthor:
//
// "The CUDA LATCH Binary Descriptor"
//
// See my GitHub for this CUDA version, which is extremely fast.
//
// Note once again that this is an UPRIGHT LATCH, a.k.a. ULATCH.
// A fast rotation- and scale-invariant version is in the works.
//
// My implementation uses multithreading and 
// many careful optimizations to implement the
// algorithm as described in the paper, but at great speed.
// This implementation outperforms the reference implementation by 400%
// single-threaded or 1700% multi-threaded (!) while exactly matching
// the reference implementation's output and capabilities in upright mode.
//
// All functionality is contained in this file, ULATCH.h. My GitHub also
// provides a sample 'main.cpp' test harness with example usage and
// performance testing.
//

#pragma once

#include <future>
#include <thread>
#include <vector>

struct KeyPoint {
	float x, y;
	KeyPoint(const float _x, const float _y) : x(_x), y(_y) {}
};

constexpr int8_t triplets[4096] = {
	-5, 1, -16, 16, -9, -21,
	-7, 16, -10, -14, -3, 9,
	11, 6, 7, 15, 3, -11,
	-22, 2, -12, 12, -22, 21,
	17, -10, 2, 10, 14, -18,
	22, -14, -2, -20, 23, 5,
	4, 16, 24, -11, 4, -21,
	13, -6, 19, 19, 23, -4,
	22, 7, 1, -8, -10, 6,
	-5, 18, 19, 11, -6, -16,
	12, -9, 24, 20, 20, -20,
	-3, -14, 5, -21, 10, 19,
	-3, 9, -17, -1, -5, -19,
	7, -2, 22, -23, 13, 20,
	19, 12, -1, -19, 15, -9,
	-19, 2, -2, -9, -22, 24,
	-2, -21, -11, -18, -3, 7,
	23, 8, 4, 7, 17, -19,
	16, 18, 10, -23, 20, 4,
	-6, 22, -1, -11, 6, -14,
	-24, -15, 15, -14, -23, -11,
	24, -13, 18, -14, 14, -19,
	-17, 10, -11, -12, -21, -17,
	19, -4, 3, 8, -2, 19,
	-18, -3, -8, -15, -18, 5,
	-6, -13, 1, 16, -6, 23,
	-22, -8, -4, -5, -15, 20,
	9, 13, -6, -23, 10, 15,
	20, 12, 11, -24, 9, 22,
	-19, -4, -1, 5, -20, 2,
	-24, 4, 15, -16, -19, -5,
	-23, 10, -11, 5, -16, 19,
	-3, 5, -22, 23, -7, -22,
	-15, 2, -9, 21, -21, 20,
	-18, 11, 16, -10, -12, 4,
	2, -7, 14, -13, 6, 20,
	3, 15, 23, -23, 5, -9,
	1, 8, -1, -4, -3, 7,
	-22, 16, -1, 19, 16, -12,
	14, -12, 9, 13, 19, 12,
	21, 2, -22, -17, 15, 3,
	0, 5, 11, -22, 8, 18,
	-15, 9, 13, 3, -18, -17,
	-12, 10, 8, 5, -21, -18,
	19, 17, 0, 18, -12, -7,
	-14, -20, 1, -7, -12, -2,
	24, 15, 3, -22, -16, 7,
	-17, 13, 24, -14, -24, -24,
	-7, -23, -4, 10, -1, 20,
	-8, -13, -1, 20, -5, -22,
	13, -22, 16, 16, 0, -14,
	-10, 12, 0, -9, -9, -16,
	20, 15, -2, -19, 19, -15,
	-19, 19, 22, 23, -14, -2,
	-24, 16, 10, -3, -8, -1,
	-22, -15, 18, 23, -23, 21,
	9, 10, 9, -23, 21, -24,
	-17, -19, 12, -23, -12, -8,
	19, 17, 0, -16, -18, -19,
	-19, 21, -7, 20, -14, 3,
	20, -2, 8, 0, 17, -10,
	-15, 24, 6, 2, -21, -22,
	-18, 12, 8, 19, -24, -14,
	16, -1, -13, -16, 24, -18,
	23, -1, 4, -10, 20, 22,
	22, -14, 2, -22, 16, 11,
	-14, -19, 24, -16, -9, -6,
	11, -5, 0, 24, -20, -12,
	17, 16, -9, 1, 18, -15,
	15, -10, -24, 16, 24, 11,
	5, 3, -3, -16, 4, -2,
	9, 19, -15, -18, 7, -19,
	11, 6, -5, 22, 14, -10,
	-8, -3, 17, 24, -19, 17,
	13, 16, 24, -20, 9, -4,
	7, -6, 16, 11, 8, 1,
	3, 23, 18, 15, 20, -24,
	22, 15, 2, 18, -12, -10,
	-15, 13, 11, 9, -13, 9,
	-10, -9, 17, 13, -13, -13,
	22, 15, -11, 7, 20, -9,
	18, 0, -11, 16, 17, 11,
	22, -18, -19, -3, 24, -15,
	22, 20, -5, 16, 19, -23,
	21, 14, 0, -8, -17, 2,
	9, 0, 2, 3, 7, 12,
	7, 18, -12, 8, 13, -24,
	-5, -11, -15, -10, -22, 9,
	19, 24, 20, 6, 24, -11,
	-10, 6, 2, -2, -17, -21,
	19, -17, 21, 21, 21, -13,
	-11, 3, -20, -5, -9, -8,
	-3, -20, -7, 23, -1, -9,
	-3, 21, 22, -12, -1, 3,
	-19, -4, 2, -3, -24, 17,
	-16, 10, 2, 1, -19, 20,
	-9, 21, -20, -17, -17, 22,
	-18, 7, -9, 19, -12, -5,
	22, 6, 8, -7, 11, 22,
	-24, 10, 5, -15, -24, -20,
	10, 20, -22, -4, 9, -20,
	-24, 6, 0, -13, -23, -15,
	22, -20, -3, 24, 19, 5,
	10, -23, -1, -9, 8, -5,
	-9, -6, 23, 0, -22, 13,
	-9, -7, 23, -13, -17, -20,
	20, 7, -21, 15, 22, -5,
	24, 24, -24, 22, 12, -12,
	16, -13, -18, 11, 9, -6,
	-10, -9, 2, 15, 18, 18,
	-18, 3, 1, 24, -24, 20,
	-23, 6, -22, -12, -17, 7,
	-19, -18, -18, 22, -2, 13,
	-22, 24, 4, 8, -22, 2,
	7, -12, 10, 19, 20, 21,
	-18, -7, 3, 8, -16, 5,
	-20, -14, 4, -9, -17, -8,
	-7, -6, -20, 18, -20, -3,
	0, 4, 4, -8, 18, -8,
	-15, -18, 1, -22, -17, 10,
	8, 13, 21, 17, 24, -3,
	14, 10, 6, -24, 17, -10,
	-22, 8, 12, -8, -18, 23,
	-13, -8, 21, 18, -15, 11,
	20, 17, 7, 7, 5, -24,
	-7, -12, 1, 14, 9, 17,
	16, 11, -24, -2, 24, 21,
	10, 9, -15, 15, 21, 16,
	-10, 3, 14, -11, -22, 8,
	22, -13, -22, 4, 14, 3,
	-1, 21, 23, -14, -2, -17,
	16, -7, -7, -23, 19, 6,
	21, -22, -15, 6, 6, -4,
	11, 7, -1, -21, -10, -4,
	-10, -23, -2, 23, -13, 5,
	-21, -24, 18, 11, -8, 5,
	-18, -24, 23, -16, -21, 16,
	-8, 6, 19, -13, -23, 23,
	-24, -23, -16, 13, -1, -11,
	-23, -10, 12, 1, -24, 2,
	-14, -20, 2, -11, -20, 24,
	-1, -4, 20, -22, -6, -19,
	12, 2, 13, -16, 15, 1,
	11, 13, -24, 10, 24, 21,
	-10, -12, 8, 10, -13, 24,
	23, 10, -13, -14, 16, 10,
	0, 22, -21, 20, 0, 18,
	24, 7, -13, 7, 18, 19,
	-10, -24, -24, -20, -13, -5,
	19, -4, 0, 21, 21, 16,
	0, -15, -13, 24, -2, 9,
	-12, 19, -10, 6, -6, -16,
	-10, 4, -4, -22, -14, -8,
	24, -7, -18, 24, 20, -1,
	18, 7, -8, 3, 23, -11,
	-20, -6, -11, 17, -5, -19,
	12, 0, 1, -11, 12, -16,
	22, -1, -2, -3, -24, 22,
	17, 17, -7, 17, 17, -12,
	-22, -6, -17, 14, -6, 11,
	-11, -13, -4, -9, -2, -18,
	-24, 16, 12, -5, -16, 13,
	-20, 23, 15, -10, -14, -16,
	21, 13, -18, 0, 12, -12,
	-18, 14, -20, -22, -18, 12,
	-16, 21, 3, -3, -17, -15,
	12, 15, 15, -19, 5, 4,
	15, -8, -16, 20, 17, 23,
	-21, 19, 7, -2, -7, 1,
	-22, 13, 21, 19, -21, -10,
	9, 0, 21, -23, 6, -24,
	-24, 13, 4, 16, -24, -13,
	-8, -18, 15, 23, -11, 23,
	18, 10, 2, 23, 15, 6,
	-14, -14, 22, 9, -21, 17,
	3, -12, -24, 0, -2, -3,
	18, 18, -9, 7, 19, 17,
	20, -11, -20, 0, 11, 4,
	5, -7, 11, -22, 18, -5,
	-15, -23, 24, 22, -17, 18,
	-23, -5, -15, -14, -7, 11,
	-3, -7, 3, 17, -4, -13,
	19, -19, -2, 24, 17, 1,
	2, -21, 8, 20, 11, -12,
	22, 11, -9, -14, 8, -4,
	-19, 2, 20, -14, -22, 23,
	9, -17, -24, -22, 9, 17,
	6, -21, -1, 0, -4, 18,
	8, -13, -9, -23, 12, 13,
	7, -2, -13, 5, 16, -5,
	-19, -23, 9, 23, -10, 9,
	1, -17, 24, -24, 4, 3,
	10, -5, -2, -1, 12, 15,
	22, 11, 6, 20, -6, -9,
	24, -22, 8, 23, -7, -10,
	3, 8, 5, -6, 2, 14,
	13, -12, -10, 11, 7, 11,
	16, -13, -7, -7, 21, -12,
	9, -8, 14, 18, 5, -9,
	12, -22, -2, 13, 8, 21,
	3, -1, -3, -2, -10, 19,
	-13, -8, 7, -5, -21, -17,
	16, -14, -4, -22, 18, 17,
	13, 2, 23, -2, 12, 5,
	-12, 1, -4, 9, -14, -2,
	-17, 22, 6, -9, -12, -13,
	-9, 2, 22, -1, -24, -10,
	-14, 14, -23, 6, -13, -3,
	-23, -12, 7, 12, -23, 16,
	-6, 20, 4, 22, 3, -20,
	5, -15, 14, 12, 3, -13,
	19, -22, -11, -12, 24, -20,
	9, 17, -12, 21, 16, 24,
	-20, -9, -10, 16, -14, -21,
	-7, -20, -23, 10, -4, -8,
	18, 6, -14, 24, 20, 10,
	-2, -21, 4, -16, 10, -2,
	-18, -12, -11, 14, -15, -21,
	14, -7, -15, -17, 18, -2,
	12, 18, -1, 0, 20, 7,
	-13, 14, -12, 23, -17, 18,
	21, -7, -5, -15, 24, -6,
	1, 1, 16, 9, -5, 18,
	22, 3, -4, 18, 22, 8,
	-10, 9, 6, 4, -16, -24,
	5, -18, -4, -12, -18, -24,
	-16, -19, -6, 18, -19, 23,
	19, -4, -23, -10, 23, -13,
	13, 8, -6, 19, 19, -6,
	8, -17, -17, 0, 12, 22,
	8, 22, 7, -22, 22, -22,
	22, -23, -19, -17, 19, 16,
	0, 12, 21, 21, 13, -22,
	-19, 3, -15, -16, -12, 1,
	-1, -24, 22, 19, -1, 13,
	-9, 7, 14, 24, -6, -1,
	-18, -3, -11, -22, -18, -5,
	-13, 9, 1, 18, 15, 7,
	-5, 12, 10, -24, 24, 22,
	-7, -15, 0, 3, -1, 24,
	21, -16, -23, -5, 19, 8,
	18, 18, -12, -16, 14, -5,
	-20, 19, 16, -2, -20, -19,
	-20, -13, 22, 21, -23, -3,
	19, -19, -16, 24, 23, 7,
	-19, 5, -1, 20, 18, 15,
	13, -11, 22, 3, 24, -14,
	-19, -9, 14, 12, -23, 17,
	-6, -1, 14, -22, -9, -9,
	19, -18, -1, 23, -21, -10,
	22, 1, 17, -12, 14, -23,
	7, -8, 0, 8, -3, 21,
	24, 2, -2, -6, 24, -12,
	8, 14, 2, -3, 9, 6,
	-10, -24, -3, 18, -11, -5,
	-12, 12, -20, -5, -7, -6,
	-17, -21, -2, -15, -17, -15,
	5, -15, 21, -23, 9, -12,
	-10, 10, 10, 4, -8, 7,
	23, 4, -3, 11, 9, 4,
	-1, -21, -9, 22, -21, -4,
	-12, -3, 19, -24, -15, 0,
	-24, 9, -8, 17, -19, -7,
	20, -24, -16, -11, 21, 19,
	11, -14, -21, 23, 19, -21,
	23, 7, -9, 17, 20, -6,
	-18, 21, -5, -17, 5, 11,
	-3, -16, -15, -13, -21, 11,
	14, 3, -2, 2, -20, -17,
	-16, -21, 19, -3, -12, 15,
	21, 20, 19, -6, 5, -1,
	21, 12, 9, 23, 1, -9,
	9, 7, -6, 6, 22, 0,
	4, -21, 14, -4, 23, 18,
	-6, -24, -12, -13, -23, 9,
	14, 21, 22, -19, 6, -9,
	-2, 22, -8, -16, -5, 23,
	-3, 19, 23, 10, -3, -18,
	-22, 21, 7, 12, -19, -12,
	-9, -6, 23, -24, -16, 7,
	1, 21, 6, 15, 14, -3,
	4, 18, -2, 10, -11, 20,
	3, -20, 23, -13, 23, 23,
	11, -12, 21, 19, 20, -8,
	14, -4, 14, 22, 13, -14,
	14, -12, 23, 7, 10, 21,
	2, -20, 4, -13, 11, -11,
	14, -13, 8, 24, 16, -14,
	-9, -8, 17, -3, -13, 21,
	-17, 16, 4, 0, -17, 24,
	-22, 18, -15, -24, -1, 8,
	-16, -10, -7, 22, -14, 5,
	1, -24, 11, -9, -1, 10,
	7, 9, -12, -4, 14, 18,
	21, -3, 15, -23, 5, -5,
	16, 24, 8, -11, 18, 23,
	17, -12, -1, 13, 18, 19,
	-18, 12, 10, -14, -14, 24,
	-4, 20, -5, 12, -9, 20,
	16, -8, -5, -20, 15, -7,
	-24, 10, 5, -11, -16, -6,
	-21, -15, 12, 14, -24, -15,
	21, 6, -1, -5, 19, 19,
	24, 10, 12, 12, 3, -15,
	-22, -13, 1, -4, -17, 4,
	19, -12, -8, 14, 22, -23,
	11, -4, -9, -10, 16, 2,
	-24, 21, -8, -21, 5, 14,
	14, -11, -21, -8, 22, -22,
	-23, -5, -1, -11, 19, 13,
	13, -12, 5, 18, 4, -24,
	-13, 22, 2, 9, -14, 19,
	13, 22, -15, 19, 9, -17,
	-3, 5, 4, -2, -3, -14,
	11, -21, 2, -15, 4, 2,
	-17, -1, -5, 15, -16, -20,
	15, -7, 0, -20, 7, 0,
	-2, 12, 23, -19, -1, -10,
	-3, -18, 13, 15, 19, -23,
	-21, 10, 5, 3, -19, 18,
	-17, -12, 9, 19, -16, 24,
	-20, -24, -1, -22, -24, -9,
	12, -5, -16, -19, 18, -6,
	-12, -23, 10, 8, -8, -11,
	17, 21, -8, -13, 15, 11,
	11, 14, 24, -23, 11, 6,
	15, 22, 7, -23, 19, 14,
	-4, 18, 21, 7, -2, 5,
	23, 10, 24, -24, 10, 10,
	-14, 24, -4, 3, -21, 2,
	2, -6, 24, 7, 6, 24,
	14, -8, -16, -15, 18, 11,
	-21, 0, -8, 14, -20, 23,
	-23, 22, 11, 7, -24, 22,
	7, 19, 24, 0, 9, 23,
	14, -9, -6, 7, 20, -23,
	20, 1, 9, 9, 13, 21,
	-11, -11, -1, 15, 9, 23,
	8, 2, -9, 10, 23, 21,
	-19, -22, 4, -2, -19, 20,
	14, -23, 20, 1, 19, 23,
	12, 22, -1, 13, -15, -18,
	24, 11, -5, 6, 21, 12,
	11, 5, -2, 15, 12, 7,
	-16, -13, 10, 10, -15, 17,
	-18, -5, -15, 3, -19, 8,
	12, -9, 12, 20, 14, -12,
	-13, -18, -23, -8, -22, 13,
	15, -18, -22, 18, 16, 14,
	7, -9, 23, 2, 20, -16,
	-17, -23, -7, 9, -24, 23,
	9, -22, -5, -16, 5, -11,
	-22, 11, -11, -2, -20, 14,
	11, -24, 8, 18, 16, -14,
	17, 12, 1, 7, -6, 18,
	4, -19, 8, 4, 7, 18,
	-10, 19, -1, -23, -19, -23,
	-1, 5, 23, 13, 1, -24,
	-16, -19, 14, 21, -19, -22,
	-9, 5, -23, 16, -9, 3,
	12, 11, 21, 15, 13, 23,
	-21, -12, 23, -24, -21, -17,
	-14, -21, -8, 13, -5, -1,
	17, 19, 24, -4, 10, 6,
	21, -22, -24, -2, 13, -8,
	23, -6, -16, -5, 21, -15,
	-12, -8, 14, -6, -11, 5,
	-5, 9, 9, -23, 16, 24,
	12, 8, -24, 19, 22, 2,
	-10, 23, 0, 3, 18, -22,
	-19, -20, 3, 15, -12, 6,
	-23, 5, 19, -3, -23, 23,
	24, 10, 8, 24, 4, -3,
	8, -23, 15, -2, 7, 20,
	19, 4, 18, -24, 23, 6,
	-9, 16, -23, -2, -6, 2,
	10, -1, 7, 21, 12, 7,
	-6, 16, 2, 5, 20, 6,
	11, -14, 3, 9, -4, -12,
	13, -22, -17, 23, 11, 15,
	11, 22, 1, 4, 17, -3,
	18, 11, -9, -14, 21, -23,
	-9, -3, 14, 14, -14, 4,
	12, 0, -4, -24, 21, 16,
	-21, -15, 6, -23, -16, -20,
	14, -20, -22, -13, 0, 1,
	7, 0, -12, -15, 13, -11,
	16, 17, 0, -1, 10, 21,
	14, -18, 2, 24, -9, -5,
	-12, -6, 23, 8, -10, 9,
	16, 24, 0, -10, -14, -16,
	-21, 12, -14, -21, -23, 13,
	-21, -24, 21, 2, -21, -15,
	1, 8, 19, 8, 13, -23,
	-8, -19, 6, -24, 17, 7,
	-24, 10, 18, 20, -21, -24,
	3, 0, 11, 22, -4, -12,
	8, -3, 5, 17, 18, 10,
	-21, 18, 18, -22, -21, -6,
	-9, 24, 2, -17, -5, 4,
	2, 5, 6, -24, 5, 21,
	20, -17, -24, 16, 5, -3,
	-10, 5, -2, -22, 5, -9,
	-3, -12, -13, 4, -21, 23,
	6, 24, 8, 13, 3, -8,
	5, -6, 19, 10, 11, 22,
	-18, -10, 17, -18, -18, 10,
	20, 17, 21, -3, 21, 18,
	-23, 2, 15, -21, -19, -10,
	-16, -18, 22, 2, -18, 22,
	2, 19, 0, -8, 5, 7,
	5, 4, -21, -14, 4, 2,
	-16, 19, 1, 15, 18, 4,
	-15, -6, -2, -18, -20, -8,
	-19, -21, -7, 10, 0, -23,
	-15, 22, 1, 7, -16, 0,
	20, -12, 12, 18, 22, 1,
	23, -2, 14, 23, 13, -2,
	5, -1, 16, -7, 3, 9,
	-11, -11, 11, -20, -13, -23,
	-22, 2, 9, -23, -20, -3,
	2, 3, -1, 24, 17, 19,
	-11, 3, 1, 20, -24, 20,
	-15, 12, -8, -14, -20, -11,
	20, -14, -8, -14, 19, 9,
	-24, -22, 15, 9, -8, -4,
	22, -7, 0, 24, 0, -3,
	19, -17, -17, 1, 23, 11,
	-24, -18, 3, 15, -16, -7,
	10, 0, -10, 23, 9, 4,
	9, 9, 2, -20, 15, -23,
	16, -19, 11, 8, 7, 23,
	17, -17, -14, -18, 21, -14,
	-10, -24, 11, 2, -10, 13,
	24, 15, 7, -3, -2, 11,
	-20, 21, 18, 4, -9, -7,
	-5, 10, -18, -6, -23, 11,
	9, -1, 0, -24, 13, -12,
	17, -1, 10, -23, 1, 15,
	24, -2, -8, -4, 24, 14,
	-18, 6, 0, -24, 18, -23,
	16, -9, -19, -18, 11, -1,
	-24, -3, -5, 22, -23, 15,
	-23, -15, 0, 9, -19, 12,
	3, -10, -11, 22, 3, -21,
	-3, -15, -21, -20, -14, 19,
	22, -21, 8, -11, 1, 23,
	-9, -17, -4, -9, -10, -2,
	15, 20, 20, -24, 9, 3,
	-16, -16, 19, 0, -19, -21,
	17, 9, 12, -12, 8, 11,
	19, 12, -23, 2, 12, 0,
	24, -16, -11, -22, 24, -19,
	18, -2, 1, 5, -7, -23,
	10, -21, 23, 1, 2, -10,
	15, -11, -24, 4, 16, 1,
	16, -13, -20, -6, 14, 13,
	12, 6, 15, -12, 10, -20,
	-23, -5, 13, 21, -18, 1,
	-19, -1, -7, -21, -23, -15,
	-21, -8, -9, -7, -18, -15,
	0, -17, 18, -12, -2, 10,
	-22, 21, -2, -14, 19, 22,
	24, 1, 6, 21, 18, -19,
	14, 12, -14, 3, 15, 17,
	-14, -13, -3, 5, 4, 12,
	12, -11, 22, -9, 24, -23,
	0, 9, 11, -20, 11, 1,
	12, 16, 12, -4, 18, 9,
	19, -17, -2, 11, -23, 22,
	15, -4, 13, 17, 22, -3,
	-9, -2, 11, -14, -13, -5,
	5, -4, -12, 18, 14, -12,
	21, 8, 2, -23, -19, 8,
	-10, -17, 0, 12, 8, 19,
	18, -18, 2, -21, 10, 13,
	13, 4, -3, -19, 19, 1,
	-21, -10, 8, -1, -24, -23,
	18, 9, 9, 20, 9, 3,
	-11, -24, 18, -23, -5, 3,
	-15, -13, 17, 12, -19, 19,
	13, -14, 3, -15, 13, -23,
	10, -10, -23, -2, 16, 16,
	-14, -21, -23, 19, -6, -6,
	-5, 21, -14, -8, -2, 11,
	13, 6, 16, -24, 15, 14,
	-21, -21, -8, 1, -1, 14,
	19, -19, 14, 5, 9, 21,
	8, -6, -18, 12, 17, 1,
	-19, -11, 14, -13, -21, 23,
	12, -18, -3, -17, 9, -14,
	12, 16, 21, -11, 19, 19,
	-23, 22, -3, -24, 14, 20,
	-7, -5, 13, -18, -18, -23,
	-22, -15, -9, -18, -10, 16,
	-5, 18, -12, 10, -4, -16,
	9, -10, -15, 6, 17, 16,
	16, -6, -1, -7, -20, -20,
	-24, -1, -18, 8, -13, -2,
	16, -22, 6, 11, 18, -12,
	4, 16, -15, -20, 1, 6,
	17, 23, 2, 15, 21, -4,
	21, 3, -24, 21, 13, 8,
	-4, -1, 4, 19, -12, -7,
	11, -12, 5, -21, -2, -13,
	-19, 20, -11, -2, -20, -24,
	11, 20, -1, -4, -3, -23,
	11, 2, -1, 7, 14, -2,
	-16, 23, -1, -8, -17, -14,
	21, -15, 6, 19, 10, -24,
	15, -23, 12, -6, 1, 11,
	-19, 17, 19, 0, -18, -8
};

void _ULATCH(const int start, const int thread_stride, const uint8_t* const __restrict image, const int stride, std::vector<KeyPoint>& keypoints, uint64_t* const __restrict descriptors) {
	for (int i = start; i < start + thread_stride; ++i) {
		uint8_t* const __restrict desc = reinterpret_cast<uint8_t*>(descriptors + (i << 3));
		const KeyPoint pt = keypoints[i];
		const int ptx = static_cast<int>(pt.x + 0.5f);
		const int pty = static_cast<int>(pt.y + 0.5f);
		for (int triplet = 0, fragment = 0; fragment < 64; ++fragment) {
			desc[fragment] = 0;
			for (int bit = 0; bit < 8; ++bit, triplet += 6) {
				const int ax = ptx + triplets[triplet];
				const int ay = pty + triplets[triplet + 1];
				const int bx = ptx + triplets[triplet + 2];
				const int by = pty + triplets[triplet + 3];
				const int cx = ptx + triplets[triplet + 4];
				const int cy = pty + triplets[triplet + 5];

				int accum = 0;
				for (int patchy = -3; patchy <= 3; ++patchy) {
					const uint8_t* const __restrict im_a = image + stride*(ay + patchy) + ax;
					const uint8_t* const __restrict im_b = image + stride*(by + patchy) + bx;
					const uint8_t* const __restrict im_c = image + stride*(cy + patchy) + cx;
					for (int patchx = -3; patchx <= 3; ++patchx) {
						const int b = static_cast<int>(im_b[patchx]);
						const int da = static_cast<int>(im_a[patchx]) - b;
						const int dc = static_cast<int>(im_c[patchx]) - b;
						accum += da*da - dc*dc;
					}
				}
				desc[fragment] |= (accum & 0x80000000) >> (31 - bit);
			}
		}
	}
}

template<bool multithread>
void ULATCH(const uint8_t* const __restrict image, const int width, const int height, const int stride, std::vector<KeyPoint>& keypoints, uint64_t* const __restrict descriptors) {
	keypoints.erase(std::remove_if(keypoints.begin(), keypoints.end(), [width, height](const KeyPoint& kp) {return kp.x <= 27 || kp.y <= 27 || kp.x >= width - 27 || kp.y >= height - 27; }), keypoints.end());
	const int sz = static_cast<int>(keypoints.size());
	if (multithread) {
		const int32_t hw_concur = std::min(sz >> 4, static_cast<int32_t>(std::thread::hardware_concurrency()));
		if (hw_concur > 1) {
			std::vector<std::future<void>> fut(hw_concur);
			const int thread_stride = (sz - 1) / hw_concur + 1;
			int i = 0, start = 0;
			for (; i < std::min(sz - 1, hw_concur - 1); ++i, start += thread_stride) {
				fut[i] = std::async(std::launch::async, _ULATCH, start, thread_stride, image, stride, std::ref(keypoints), descriptors);
			}
			fut[i] = std::async(std::launch::async, _ULATCH, start, sz - start, image, stride, std::ref(keypoints), descriptors);
			for (int j = 0; j <= i; ++j) fut[j].wait();
		}
		else {
			_ULATCH(0, sz, image, stride, std::ref(keypoints), descriptors);
		}
	}
	else {
		_ULATCH(0, sz, image, stride, std::ref(keypoints), descriptors);
	}
}